// Code generated by protoc-gen-go.
// source: util/grpckblv/testproto/lbtest.proto
// DO NOT EDIT!

/*
Package testproto is a generated protocol buffer package.

It is generated from these files:
	util/grpckblv/testproto/lbtest.proto

It has these top-level messages:
	LBInfoRequest
	LBInfoResponse
*/
package testproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LBInfoRequest struct {
}

func (m *LBInfoRequest) Reset()                    { *m = LBInfoRequest{} }
func (m *LBInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*LBInfoRequest) ProtoMessage()               {}
func (*LBInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LBInfoResponse struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *LBInfoResponse) Reset()                    { *m = LBInfoResponse{} }
func (m *LBInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*LBInfoResponse) ProtoMessage()               {}
func (*LBInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*LBInfoRequest)(nil), "testproto.LBInfoRequest")
	proto.RegisterType((*LBInfoResponse)(nil), "testproto.LBInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TestProto service

type TestProtoClient interface {
	GetLBInfo(ctx context.Context, in *LBInfoRequest, opts ...grpc.CallOption) (*LBInfoResponse, error)
}

type testProtoClient struct {
	cc *grpc.ClientConn
}

func NewTestProtoClient(cc *grpc.ClientConn) TestProtoClient {
	return &testProtoClient{cc}
}

func (c *testProtoClient) GetLBInfo(ctx context.Context, in *LBInfoRequest, opts ...grpc.CallOption) (*LBInfoResponse, error) {
	out := new(LBInfoResponse)
	err := grpc.Invoke(ctx, "/testproto.TestProto/GetLBInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestProto service

type TestProtoServer interface {
	GetLBInfo(context.Context, *LBInfoRequest) (*LBInfoResponse, error)
}

func RegisterTestProtoServer(s *grpc.Server, srv TestProtoServer) {
	s.RegisterService(&_TestProto_serviceDesc, srv)
}

func _TestProto_GetLBInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).GetLBInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testproto.TestProto/GetLBInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).GetLBInfo(ctx, req.(*LBInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testproto.TestProto",
	HandlerType: (*TestProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLBInfo",
			Handler:    _TestProto_GetLBInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("util/grpckblv/testproto/lbtest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x2d, 0xc9, 0xcc,
	0xd1, 0x4f, 0x2f, 0x2a, 0x48, 0xce, 0x4e, 0xca, 0x29, 0xd3, 0x2f, 0x49, 0x2d, 0x2e, 0x29, 0x28,
	0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x49, 0x02, 0xb1, 0xf5, 0xc0, 0x1c, 0x21, 0x4e, 0xb8, 0xb8, 0x12,
	0x3f, 0x17, 0xaf, 0x8f, 0x93, 0x67, 0x5e, 0x5a, 0x7e, 0x50, 0x6a, 0x61, 0x29, 0x50, 0x54, 0x49,
	0x85, 0x8b, 0x0f, 0x26, 0x50, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc4, 0xc5, 0xe2, 0x97,
	0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4, 0x92, 0x07, 0x64, 0x1b, 0xf9, 0x73,
	0x71, 0x86, 0x00, 0x55, 0x07, 0x80, 0x8d, 0x73, 0xe2, 0xe2, 0x74, 0x4f, 0x2d, 0x81, 0xe8, 0x12,
	0x92, 0xd0, 0x83, 0x1b, 0xae, 0x87, 0x62, 0xb2, 0x94, 0x24, 0x16, 0x19, 0x88, 0x15, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x71, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x7d, 0xe1, 0xeb, 0xc1,
	0x00, 0x00, 0x00,
}
